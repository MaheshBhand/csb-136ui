{"version":3,"sources":["ListItem.js","AutoCompleteBox.js","App.js","index.js"],"names":["ListItem","item","index","hideSuggestions","setText","onSelect","cursor","onClick","name","className","AutoCompleteBox","items","useState","isVisible","setVisibility","text","setCursor","showSuggestions","containerRef","useRef","searchListRef","useEffect","window","addEventListener","handleClickOutside","removeEventListener","e","current","contains","target","scrollToItem","position","scrollTo","top","behavior","searchList","useMemo","filter","toLowerCase","includes","length","listItems","Array","from","children","offsetTop","ref","type","placeholder","autoComplete","onChange","value","onKeyDown","key","c","handleKeyboard","map","i","App","setItems","getResponse","a","axios","get","response","result","data","results","console","log","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.b1a442bf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ListItem = ({\r\n  item,\r\n  index,\r\n  hideSuggestions,\r\n  setText,\r\n  onSelect,\r\n  cursor\r\n}) => (\r\n  <li\r\n    onClick={() => {\r\n      hideSuggestions();\r\n      setText(item.name);\r\n      onSelect(item);\r\n    }}\r\n    className={cursor === index ? \"active\" : \"\"}\r\n  >\r\n    {item.name}\r\n  </li>\r\n);\r\n\r\nListItem.propTypes = {\r\n  item: PropTypes.object,\r\n  index: PropTypes.number,\r\n  hideSuggestions: PropTypes.func,\r\n  setText: PropTypes.func,\r\n  onSelect: PropTypes.func,\r\n  cursor: PropTypes.number\r\n};\r\n\r\nexport default ListItem;\r\n","import React, { useState, useRef, useEffect, useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ListItem from \"./ListItem\";\r\n\r\nconst AutoCompleteBox = ({ items = [], onSelect }) => {\r\n  const [isVisible, setVisibility] = useState(false);\r\n  const [text, setText] = useState(\"\");\r\n  const [cursor, setCursor] = useState(-1);\r\n\r\n  const showSuggestions = () => setVisibility(true);\r\n  const hideSuggestions = () => setVisibility(false);\r\n\r\n  const containerRef = useRef(null);\r\n  const searchListRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"mousedown\", handleClickOutside);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  });\r\n\r\n  const handleClickOutside = (e) => {\r\n    if (containerRef.current && !containerRef.current.contains(e.target)) {\r\n      hideSuggestions();\r\n    }\r\n  };\r\n\r\n  // scrolling to given position on up arrow and down arrow\r\n  const scrollToItem = (position) => {\r\n    searchListRef.current.scrollTo({\r\n      top: position - 200,\r\n      behavior: \"smooth\"\r\n    });\r\n  };\r\n\r\n  // generating list array for suggestion box\r\n  const searchList = useMemo(() => {\r\n    if (!text) return items;\r\n\r\n    setCursor(-1);\r\n    scrollToItem(0);\r\n\r\n    return (\r\n      items &&\r\n      items.filter((item) => {\r\n        return item.name.toLowerCase().includes(text.toLowerCase());\r\n      })\r\n    );\r\n  }, [items, text]);\r\n\r\n  useEffect(() => {\r\n    if (cursor < 0 || cursor > searchList.length || !searchListRef) {\r\n      return () => {};\r\n    }\r\n\r\n    let listItems = Array.from(searchListRef.current.children);\r\n\r\n    listItems[cursor] && scrollToItem(listItems[cursor].offsetTop);\r\n  }, [cursor, searchList]);\r\n\r\n  // Handling keyboard navigations\r\n  const handleKeyboard = (e) => {\r\n    switch (e.key) {\r\n      case \"ArrowDown\":\r\n        isVisible\r\n          ? setCursor((c) => (c < searchList.length - 1 ? c + 1 : c))\r\n          : showSuggestions();\r\n        break;\r\n      case \"ArrowUp\":\r\n        setCursor((c) => (c > 0 ? c - 1 : 0));\r\n        break;\r\n      case \"Escape\":\r\n        hideSuggestions();\r\n        break;\r\n      case \"Enter\":\r\n      case cursor > 0:\r\n        setText(searchList[cursor].name);\r\n        hideSuggestions();\r\n        onSelect(searchList[cursor]);\r\n        break;\r\n      case \"Backspace\":\r\n        showSuggestions();\r\n        break;\r\n      default:\r\n        showSuggestions();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"auto-complete-wrapper\" ref={containerRef}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"search\"\r\n        placeholder=\"Search\"\r\n        autoComplete=\"off\"\r\n        className=\"search-bar\"\r\n        onClick={() => showSuggestions()}\r\n        onChange={(e) => (items.length ? setText(e.target.value) : \"\")}\r\n        onKeyDown={(e) => handleKeyboard(e)}\r\n        value={text}\r\n      />\r\n      <ul ref={searchListRef} className={`${isVisible ? \"show\" : \"hide\"}`}>\r\n        {searchList.length ? (\r\n          searchList.map((item, i) => (\r\n            <ListItem\r\n              key={i}\r\n              index={i}\r\n              item={item}\r\n              hideSuggestions={hideSuggestions}\r\n              setText={setText}\r\n              onSelect={onSelect}\r\n              cursor={cursor}\r\n            />\r\n          ))\r\n        ) : (\r\n          <li>No Result Found</li>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nAutoCompleteBox.propTypes = {\r\n  items: PropTypes.array,\r\n  onSelect: PropTypes.func\r\n};\r\n\r\nexport default AutoCompleteBox;\r\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport AutoCompleteBox from \"./AutoCompleteBox\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [items, setItems] = useState([]);\n\n  const onSelect = () => {\n    console.log(\"On Item Select\");\n  };\n\n  // API Call\n  const getResponse = async () => {\n    const response = await axios.get(\n      \"https://rickandmortyapi.com/api/character/?name=rick\"\n    );\n\n    let result = response.data.results;\n    setItems(result);\n  };\n\n  useEffect(() => {\n    !items.length && getResponse();\n  });\n\n  return (\n    <div className=\"App\">\n      <h1>Auto Complete Suggestion Box</h1>\n      <AutoCompleteBox items={items} onSelect={onSelect} />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}